import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import FileUploader from "@/components/FileUploader";
import Header from "@/components/Header";
import { ArrowLeft, Package, CheckCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useTasks } from '@/hooks/useTasks';
import { useAuth } from '@/contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { useShipments } from '@/hooks/useShipments';

interface UploadedFile {
  id: string;
  name: string;
  size: number;
  type: string;
  file: File;
}

const CreateShipment = () => {
  const { toast } = useToast();
  const { fetchItems } = useShipments();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    address: '',
    workSchedule: '',
    requestCode: '',
    loadingContacts: '',
    shopName: '',
    goodsName: '',
    goodsVolume: '',
    goodsWeight: '',
    goodsPackage: '',
    contractNumber: '',
    loadingDate: '',
    loadingRequirements: '',
    additionalInfo: ''
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async () => {
    if (files.length === 0) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª"
      });
      return;
    }

    if (!formData.address || !formData.goodsName || !formData.contractNumber) {
      toast({
        variant: "destructive", 
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"
      });
      return;
    }

    try {
      setLoading(true);
      
      const task = await createTask({
        task_type: 'shipment',
        description: `–û—Ç–≥—Ä—É–∑–∫–∞: ${formData.goodsName}`,
        address: formData.address,
        shop_name: formData.shopName,
        goods_name: formData.goodsName,
        goods_volume: formData.goodsVolume,
        goods_weight: formData.goodsWeight,
        goods_package: formData.goodsPackage,
        contract_number: formData.contractNumber,
        loading_date: formData.loadingDate,
        loading_requirements: formData.loadingRequirements,
        loading_contacts: formData.loadingContacts,
        request_code: formData.requestCode,
        schedule: formData.workSchedule,
        additional_info: formData.additionalInfo,
        status: 'submitted',
        user_id: user?.id || ''
      });

      if (task) {
        toast({
          title: "–û—Ç–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
          description: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–≥—Ä—É–∑–æ–∫"
        });
        navigate('/tasks');
      }
    } catch (error) {
      console.error('Create shipment error:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <Header />
      
      <div className="container mx-auto px-4 py-8">
        <div className="mb-6">
          <Button variant="ghost" className="mb-4" onClick={() => navigate('/')}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ù–∞–∑–∞–¥
          </Button>
          
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-br from-primary to-primary-glow rounded-lg flex items-center justify-center">
              <Package className="w-5 h-5 text-primary-foreground" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">–°–æ–∑–¥–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É</h1>
              <p className="text-muted-foreground">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏</p>
            </div>
          </div>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üìã</span>
                  <span>–î–æ–∫—É–º–µ–Ω—Ç—ã</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –¥–æ–≥–æ–≤–æ—Ä
                </p>
                <FileUploader onFilesChange={setFiles} maxFiles={10} />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üè≠</span>
                  <span>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="address">–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ *</Label>
                  <Textarea
                    id="address"
                    value={formData.address}
                    onChange={(e) => handleInputChange('address', e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞..."
                  />
                </div>
                
                <div>
                  <Label htmlFor="workSchedule">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∫–ª–∞–¥–∞</Label>
                  <Input
                    id="workSchedule"
                    value={formData.workSchedule}
                    onChange={(e) => handleInputChange('workSchedule', e.target.value)}
                    placeholder="–ü–Ω-–ü—Ç 9:00-18:00"
                  />
                </div>

                <div>
                  <Label htmlFor="requestCode">–ö–æ–¥ –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–∫–ª–∞–¥–∞</Label>
                  <Input
                    id="requestCode"
                    value={formData.requestCode}
                    onChange={(e) => handleInputChange('requestCode', e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞—è–≤–∫–∏ –∏–ª–∏ '–Ω–µ—Ç'"
                  />
                </div>

                <div>
                  <Label htmlFor="loadingContacts">–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü –Ω–∞ –∑–∞–≥—Ä—É–∑–∫–µ</Label>
                  <Textarea
                    id="loadingContacts"
                    value={formData.loadingContacts}
                    onChange={(e) => handleInputChange('loadingContacts', e.target.value)}
                    placeholder="–§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, —Ç–µ–ª–µ—Ñ–æ–Ω..."
                  />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üè™</span>
                  <span>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–≤–∫–µ –∏ —Ç–æ–≤–∞—Ä–µ</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="shopName">–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–≤–∫–∏</Label>
                  <Input
                    id="shopName"
                    value={formData.shopName}
                    onChange={(e) => handleInputChange('shopName', e.target.value)}
                    placeholder="–û—Ç –∫–∞–∫–æ–π –ª–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å?"
                  />
                </div>

                <div>
                  <Label htmlFor="goodsName">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *</Label>
                  <Input
                    id="goodsName"
                    value={formData.goodsName}
                    onChange={(e) => handleInputChange('goodsName', e.target.value)}
                    placeholder="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
                  />
                </div>

                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="goodsVolume">–û–±—ä–µ–º —Ç–æ–≤–∞—Ä–∞</Label>
                    <Input
                      id="goodsVolume"
                      value={formData.goodsVolume}
                      onChange={(e) => handleInputChange('goodsVolume', e.target.value)}
                      placeholder="–ö–æ–ª-–≤–æ –µ–¥–∏–Ω–∏—Ü, –º–µ—Ç—Ä—ã, —à—Ç—É–∫–∏..."
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="goodsWeight">–í–µ—Å —Ç–æ–≤–∞—Ä–∞</Label>
                    <Input
                      id="goodsWeight"
                      value={formData.goodsWeight}
                      onChange={(e) => handleInputChange('goodsWeight', e.target.value)}
                      placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å..."
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="goodsPackage">–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏</Label>
                  <Input
                    id="goodsPackage"
                    value={formData.goodsPackage}
                    onChange={(e) => handleInputChange('goodsPackage', e.target.value)}
                    placeholder="–ü–∞–ª–ª–µ—Ç—ã, –∫–æ—Ä–æ–±–∫–∏, –±—É—Ö—Ç—ã..."
                  />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üìã</span>
                  <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="contractNumber">–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ *</Label>
                  <Input
                    id="contractNumber"
                    value={formData.contractNumber}
                    onChange={(e) => handleInputChange('contractNumber', e.target.value)}
                    placeholder="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞..."
                  />
                </div>

                <div>
                  <Label htmlFor="loadingDate">–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏</Label>
                  <Input
                    id="loadingDate"
                    type="date"
                    value={formData.loadingDate}
                    onChange={(e) => handleInputChange('loadingDate', e.target.value)}
                  />
                </div>

                <div>
                  <Label htmlFor="loadingRequirements">–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ</Label>
                  <Textarea
                    id="loadingRequirements"
                    value={formData.loadingRequirements}
                    onChange={(e) => handleInputChange('loadingRequirements', e.target.value)}
                    placeholder="–£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç'"
                  />
                </div>

                <div>
                  <Label htmlFor="additionalInfo">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Label>
                  <Textarea
                    id="additionalInfo"
                    value={formData.additionalInfo}
                    onChange={(e) => handleInputChange('additionalInfo', e.target.value)}
                    placeholder="–õ—é–±–∞—è –¥—Ä—É–≥–∞—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."
                  />
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="space-y-6">
            <Card className="sticky top-4">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <CheckCircle className="w-5 h-5 text-success" />
                  <span>–°–≤–æ–¥–∫–∞</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>–¢–∏–ø –∑–∞–¥–∞—á–∏:</span>
                    <span className="font-medium">–û—Ç–≥—Ä—É–∑–∫–∞</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>–§–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:</span>
                    <span className="font-medium">{files.length}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π:</span>
                    <span className="font-medium">
                      {Object.values(formData).filter(value => value.trim() !== '').length}/13
                    </span>
                  </div>
                </div>
                
                <Button 
                  onClick={handleSubmit} 
                  className="w-full"
                  size="lg"
                  disabled={loading}
                >
                  {loading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-foreground mr-2" />
                      –°–æ–∑–¥–∞–Ω–∏–µ...
                    </>
                  ) : (
                    <>
                      <Package className="w-4 h-4 mr-2" />
                      –°–æ–∑–¥–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateShipment;