import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import FileUploader from '@/components/FileUploader'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
import { UploadedFile } from '@/components/FileUploader';
import Header from "@/components/Header";
import { ArrowLeft, Package, CheckCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from '@/contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { useShipments } from '@/hooks/useShipments';
import { useFiles } from "@/hooks/useFiles";

const CreateShipment = () => {
  const { toast } = useToast();
  const { createItem } = useShipments();
  const { user } = useAuth();
  const navigate = useNavigate();
  const { uploadFilesWithProgress } = useFiles();
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const { uploadFile } = useFiles();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    externalId: '',
    status: 'planned',
    fromLocation: '',
    toLocation: '',
    plannedDate: '',
    actualDate: '',
    items: [],

    // –ù–æ–≤—ã–µ –ø–æ–ª—è
    address: '',
    workSchedule: '',
    requestCode: '',
    loadingContacts: '',
    shopName: '',
    goodsName: '',
    goodsVolume: '',
    goodsWeight: '',
    goodsPackage: '',
    contractNumber: '',
    loadingDate: '',
    loadingRequirements: '',
    additionalInfo: ''
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
  const prepareSubmitData = () => {
    return {
      external_id: formData.externalId,
      status: formData.status,
      from_location: formData.fromLocation,
      to_location: formData.toLocation,
      planned_date: formData.plannedDate || null,
      actual_date: formData.actualDate || null,
      items: formData.items,
      address: formData.address,
      work_schedule: formData.workSchedule,
      request_code: formData.requestCode,
      loading_contacts: formData.loadingContacts,
      shop_name: formData.shopName,
      goods_name: formData.goodsName,
      goods_volume: formData.goodsVolume,
      goods_weight: formData.goodsWeight,
      goods_package: formData.goodsPackage,
      contract_number: formData.contractNumber,
      loading_date: formData.loadingDate || null,
      loading_requirements: formData.loadingRequirements,
      additional_info: formData.additionalInfo,
      created_by: user?.id || ""
    };
  };

  const handleSubmit = async () => {
    if (!formData.address || !formData.goodsName || !formData.contractNumber) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∞–¥—Ä–µ—Å, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"
      });
      return;
    }

    try {
      setLoading(true);

      // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const uploadedIds: string[] = [];
      if (files.length > 0) {
        for (const f of files) {
          const uploaded = await uploadFile(f.file);
          if (uploaded) uploadedIds.push(uploaded.id);
        }
      }

      const submitData = prepareSubmitData();

      const shipment = await createItem({
        ...submitData
      });

      if (shipment && shipment.id) {
        if (files.length > 0) {
          const { successes, errors } = await uploadFilesWithProgress(
            files,
            'App\\Models\\Task', // entity_type –¥–ª—è Laravel
            task.id, // entity_id - ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            // –ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            (fileId, status, serverId) => {
              setFiles(prevFiles =>
                prevFiles.map(file =>
                  file.id === fileId
                    ? { ...file, status, ...(serverId && { serverId }) }
                    : file
                )
              );
            }
          );

          if (errors.length > 0) {
            toast({
              variant: "destructive",
              title: "–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞",
              description: `–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ ${errors.length} –∏–∑ ${files.length} —Ñ–∞–π–ª–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`
            });
          } else {
            toast({
              title: "–£—Å–ø–µ—Ö!",
              description: `–û—Ç–≥—Ä—É–∑–∫–∞ –∏ ${successes.length} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã`
            });
          }
        } else {
          toast({
          title: "–û—Ç–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
          description: "–û—Ç–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
        });
        }
        toast({
          title: "–û—Ç–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
          description: "–û—Ç–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
        });
        navigate('/shipments');
      }
    } catch (error) {
      console.error("Create shipment error:", error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É"
      });
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  const requiredFieldsFilled = formData.address && formData.goodsName && formData.contractNumber;

  return (
    <div className="min-h-screen bg-background">
      <Header />

      <div className="container mx-auto px-4 py-8">
        <div className="mb-6">
          <Button variant="ghost" className="mb-4" onClick={() => navigate('/shipments')}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ù–∞–∑–∞–¥ –∫ –æ—Ç–≥—Ä—É–∑–∫–∞–º
          </Button>

          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-br from-primary to-primary-glow rounded-lg flex items-center justify-center">
              <Package className="w-5 h-5 text-primary-foreground" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">–°–æ–∑–¥–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É</h1>
              <p className="text-muted-foreground">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏</p>
            </div>
          </div>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-6">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üì¶</span>
                  <span>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="externalId">–í–Ω–µ—à–Ω–∏–π ID</Label>
                    <Input
                      id="externalId"
                      name="externalId"
                      value={formData.externalId}
                      onChange={handleInputChange}
                      placeholder="–í–Ω–µ—à–Ω–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"
                    />
                  </div>

                  <div>
                    <Label htmlFor="status">–°—Ç–∞—Ç—É—Å</Label>
                    <Select value={formData.status} onValueChange={(value) => handleSelectChange('status', value)}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="planned">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞</SelectItem>
                        <SelectItem value="in_transit">–í –ø—É—Ç–∏</SelectItem>
                        <SelectItem value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞</SelectItem>
                        <SelectItem value="cancelled">–û—Ç–º–µ–Ω–µ–Ω–∞</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="fromLocation">–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</Label>
                    <Input
                      id="fromLocation"
                      name="fromLocation"
                      value={formData.fromLocation}
                      onChange={handleInputChange}
                      placeholder="–û—Ç–∫—É–¥–∞"
                    />
                  </div>

                  <div>
                    <Label htmlFor="toLocation">–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</Label>
                    <Input
                      id="toLocation"
                      name="toLocation"
                      value={formData.toLocation}
                      onChange={handleInputChange}
                      placeholder="–ö—É–¥–∞"
                    />
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="plannedDate">–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞</Label>
                    <Input
                      id="plannedDate"
                      name="plannedDate"
                      type="date"
                      value={formData.plannedDate}
                      onChange={handleInputChange}
                    />
                  </div>

                  <div>
                    <Label htmlFor="actualDate">–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞</Label>
                    <Input
                      id="actualDate"
                      name="actualDate"
                      type="date"
                      value={formData.actualDate}
                      onChange={handleInputChange}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* –î–æ–∫—É–º–µ–Ω—Ç—ã */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üìã</span>
                  <span>–î–æ–∫—É–º–µ–Ω—Ç—ã</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –¥–æ–≥–æ–≤–æ—Ä (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                </p>
                <FileUploader onFilesChange={setFiles} maxFiles={10} />
              </CardContent>
            </Card>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üè≠</span>
                  <span>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="address">–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ *</Label>
                  <Textarea
                    id="address"
                    name="address"
                    value={formData.address}
                    onChange={handleInputChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞..."
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="workSchedule">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∫–ª–∞–¥–∞</Label>
                  <Input
                    id="workSchedule"
                    name="workSchedule"
                    value={formData.workSchedule}
                    onChange={handleInputChange}
                    placeholder="–ü–Ω-–ü—Ç 9:00-18:00"
                  />
                </div>

                <div>
                  <Label htmlFor="requestCode">–ö–æ–¥ –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–∫–ª–∞–¥–∞</Label>
                  <Input
                    id="requestCode"
                    name="requestCode"
                    value={formData.requestCode}
                    onChange={handleInputChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞—è–≤–∫–∏ –∏–ª–∏ '–Ω–µ—Ç'"
                  />
                </div>

                <div>
                  <Label htmlFor="loadingContacts">–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü –Ω–∞ –∑–∞–≥—Ä—É–∑–∫–µ</Label>
                  <Textarea
                    id="loadingContacts"
                    name="loadingContacts"
                    value={formData.loadingContacts}
                    onChange={handleInputChange}
                    placeholder="–§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, —Ç–µ–ª–µ—Ñ–æ–Ω..."
                  />
                </div>
              </CardContent>
            </Card>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–≤–∫–µ –∏ —Ç–æ–≤–∞—Ä–µ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üè™</span>
                  <span>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–≤–∫–µ –∏ —Ç–æ–≤–∞—Ä–µ</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="shopName">–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–≤–∫–∏</Label>
                  <Input
                    id="shopName"
                    name="shopName"
                    value={formData.shopName}
                    onChange={handleInputChange}
                    placeholder="–û—Ç –∫–∞–∫–æ–π –ª–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å?"
                  />
                </div>

                <div>
                  <Label htmlFor="goodsName">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *</Label>
                  <Input
                    id="goodsName"
                    name="goodsName"
                    value={formData.goodsName}
                    onChange={handleInputChange}
                    placeholder="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
                    required
                  />
                </div>

                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="goodsVolume">–û–±—ä–µ–º —Ç–æ–≤–∞—Ä–∞</Label>
                    <Input
                      id="goodsVolume"
                      name="goodsVolume"
                      value={formData.goodsVolume}
                      onChange={handleInputChange}
                      placeholder="–ö–æ–ª-–≤–æ –µ–¥–∏–Ω–∏—Ü, –º–µ—Ç—Ä—ã, —à—Ç—É–∫–∏..."
                    />
                  </div>

                  <div>
                    <Label htmlFor="goodsWeight">–í–µ—Å —Ç–æ–≤–∞—Ä–∞</Label>
                    <Input
                      id="goodsWeight"
                      name="goodsWeight"
                      value={formData.goodsWeight}
                      onChange={handleInputChange}
                      placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å..."
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="goodsPackage">–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏</Label>
                  <Input
                    id="goodsPackage"
                    name="goodsPackage"
                    value={formData.goodsPackage}
                    onChange={handleInputChange}
                    placeholder="–ü–∞–ª–ª–µ—Ç—ã, –∫–æ—Ä–æ–±–∫–∏, –±—É—Ö—Ç—ã..."
                  />
                </div>
              </CardContent>
            </Card>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <span>üìã</span>
                  <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="contractNumber">–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ *</Label>
                  <Input
                    id="contractNumber"
                    name="contractNumber"
                    value={formData.contractNumber}
                    onChange={handleInputChange}
                    placeholder="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞..."
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="loadingDate">–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏</Label>
                  <Input
                    id="loadingDate"
                    name="loadingDate"
                    type="date"
                    value={formData.loadingDate}
                    onChange={handleInputChange}
                  />
                </div>

                <div>
                  <Label htmlFor="loadingRequirements">–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ</Label>
                  <Textarea
                    id="loadingRequirements"
                    name="loadingRequirements"
                    value={formData.loadingRequirements}
                    onChange={handleInputChange}
                    placeholder="–£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç'"
                  />
                </div>

                <div>
                  <Label htmlFor="additionalInfo">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Label>
                  <Textarea
                    id="additionalInfo"
                    name="additionalInfo"
                    value={formData.additionalInfo}
                    onChange={handleInputChange}
                    placeholder="–õ—é–±–∞—è –¥—Ä—É–≥–∞—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."
                  />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* –°–≤–æ–¥–∫–∞ */}
          <div className="space-y-6">
            <Card className="sticky top-4">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <CheckCircle className="w-5 h-5 text-success" />
                  <span>–°–≤–æ–¥–∫–∞</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>–¢–∏–ø –∑–∞–¥–∞—á–∏:</span>
                    <span className="font-medium">–û—Ç–≥—Ä—É–∑–∫–∞</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>–§–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:</span>
                    <span className="font-medium">{files.length}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>–°—Ç–∞—Ç—É—Å:</span>
                    <span className="font-medium capitalize">
                      {formData.status === 'planned' && '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞'}
                      {formData.status === 'in_transit' && '–í –ø—É—Ç–∏'}
                      {formData.status === 'delivered' && '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}
                      {formData.status === 'cancelled' && '–û—Ç–º–µ–Ω–µ–Ω–∞'}
                    </span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:</span>
                    <span className={`font-medium ${requiredFieldsFilled ? 'text-success' : 'text-destructive'}`}>
                      {requiredFieldsFilled ? '–ó–∞–ø–æ–ª–Ω–µ–Ω—ã' : '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'}
                    </span>
                  </div>
                </div>

                <Button
                  onClick={handleSubmit}
                  className="w-full"
                  size="lg"
                  disabled={loading || !requiredFieldsFilled}
                >
                  {loading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-foreground mr-2" />
                      –°–æ–∑–¥–∞–Ω–∏–µ...
                    </>
                  ) : (
                    <>
                      <Package className="w-4 h-4 mr-2" />
                      –°–æ–∑–¥–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É
                    </>
                  )}
                </Button>

                {!requiredFieldsFilled && (
                  <p className="text-xs text-muted-foreground text-center">
                    –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (*)
                  </p>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateShipment;